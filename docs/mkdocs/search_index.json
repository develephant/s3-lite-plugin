{
    "docs": [
        {
            "location": "/",
            "text": "Amazon S3 Lite\n\n\nSecure file transfers for your \nCorona\n games and applications using \nAmazon S3\n.\n\n\nGet The Plugin\n\n\nIf you don't already have it, get the \nS3 Lite\n plugin from the \nCorona Marketplace\n.\n\n\nAdding The Plugin\n\n\nAdd the plugin by adding an entry to the \nplugins\n table of \nbuild.settings\n file:\n\n\nsettings =\n{\n    plugins =\n    {\n        [\"plugin.s3-lite\"] =\n        {\n            publisherId = \"com.develephant\"\n        },\n    },\n}",
            "title": "Introduction"
        },
        {
            "location": "/#amazon-s3-lite",
            "text": "Secure file transfers for your  Corona  games and applications using  Amazon S3 .",
            "title": "Amazon S3 Lite"
        },
        {
            "location": "/#get-the-plugin",
            "text": "If you don't already have it, get the  S3 Lite  plugin from the  Corona Marketplace .",
            "title": "Get The Plugin"
        },
        {
            "location": "/#adding-the-plugin",
            "text": "Add the plugin by adding an entry to the  plugins  table of  build.settings  file:  settings =\n{\n    plugins =\n    {\n        [\"plugin.s3-lite\"] =\n        {\n            publisherId = \"com.develephant\"\n        },\n    },\n}",
            "title": "Adding The Plugin"
        },
        {
            "location": "/api/",
            "text": "Setup\n\n\nTo use the S3 Lite plugin, you will need to \nrequire\n it:\n\n\nlocal\n \ns3\n \n=\n \nrequire\n(\n\"plugin.s3-lite\"\n)\n\n\n\n\n\n\n\n\nnew\n\n\nCreate and initialize a new S3 Lite instance.\n\n\ns3\n:\nnew\n(\nconfig_tbl\n)\n\n\n\n\n\n\nConfig Table Keys\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nThe AWS key for the account.\n\n\nString\n\n\nnil\n\n\nY\n\n\n\n\n\n\nsecret\n\n\nThe AWS secret key for the account.\n\n\nString\n\n\nnil\n\n\nY\n\n\n\n\n\n\nregion\n\n\nThe region where the S3 bucket resides.\n\n\nConst\n\n\ns3.US_EAST_1\n\n\nN\n\n\n\n\n\n\n\n\nUsage\n\n\ns3\n:\nnew\n({\n\n  \nkey\n \n=\n \n\"aws-key-1234\"\n,\n\n  \nsecret\n \n=\n \n\"aws-secret-abcd\"\n,\n\n  \nregion\n \n=\n \ns3\n.\nEU_WEST_1\n\n\n})\n\n\n\n\n\n\n\n\nNote\n\n\nThe AWS user must have the proper S3 \npermissions\n set up through the AWS IAM console.\n\n\n\n\n\n\nlistBuckets\n\n\nList S3 buckets that are owned by the AWS user. Returns a table array with bucket names. If no buckets exist, the array will be empty.\n\n\ns3\n:\nlistBuckets\n(\nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nlistener\n\n\nAn event listener to receive the results.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nUsage\n\n\nlocal\n \nfunction\n \nonListBuckets\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n,\n \nevt\n.\nmessage\n,\n \nevt\n.\nstatus\n)\n\n  \nelse\n\n    \nlocal\n \nbuckets\n \n=\n \nevt\n.\nbuckets\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nbuckets\n \ndo\n\n      \nprint\n(\nbuckets\n[\ni\n])\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ns3\n:\nlistBuckets\n(\nonListBuckets\n)\n\n\n\n\n\n\n\n\nNote\n\n\nBucket creation and deletion must be managed through the AWS S3 web console.\n\n\n\n\n\n\nlistObjects\n\n\nList objects contained in a bucket owned by the AWS user.\n\n\ns3\n:\nlistObjects\n(\nbucket_name\n,\n \nlistener\n[,\n \nparams\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbucket_name\n\n\nThe name of the bucket to list.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nAn event listener to receive the results.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nUsage\n\n\nlocal\n \nfunction\n \nonListObjects\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n,\n \nevt\n.\nmessage\n,\n \nevt\n.\nstatus\n)\n\n  \nelse\n\n    \nlocal\n \nobjects\n \n=\n \nevt\n.\nobjects\n\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nobjects\n \ndo\n\n      \nprint\n(\nobjects\n[\ni\n].\nkey\n,\n \nobjects\n[\ni\n].\nsize\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ns3\n:\nlistObjects\n(\n\"my-bucket\"\n,\n \nonListObjects\n)\n\n\n\n\n\n\nList Objects Parameters Keys\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmaxKeys\n\n\nSets the maximum number of keys returned.\n\n\nNumber\n\n\n1000\n\n\n\n\n\n\nprefix\n\n\nReturn keys that begin with the specified prefix. See \nPrefixes\n.\n\n\nString\n\n\nnil\n\n\n\n\n\n\nstartAfter\n\n\nReturn key names after a specific object key. See \nStart-After\n below.\n\n\nString\n\n\nnil\n\n\n\n\n\n\nnextToken\n\n\nToken to get the next set of results, if any. See \nPaging\n below.\n\n\nString\n\n\nnil\n\n\n\n\n\n\n\n\nUsage\n\n\nlocal\n \nfunction\n \nonListObjects\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n,\n \nevt\n.\nmessage\n,\n \nevt\n.\nstatus\n)\n\n  \nelse\n\n    \nlocal\n \nobjects\n \n=\n \nevt\n.\nobjects\n\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nobjects\n \ndo\n\n      \nprint\n(\nobjects\n[\ni\n].\nkey\n,\n \nobjects\n[\ni\n].\nsize\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \nmaxKeys\n \n=\n \n20\n\n\n}\n\n\n\ns3\n:\nlistObjects\n(\n\"my-bucket\"\n,\n \nonListObjects\n,\n \nparams\n)\n\n\n\n\n\n\nPaging\n\n\nIf the bucket contains more than 1000 objects, or you have set the \nmaxKeys\n to a number less than the total amount of objects in the bucket, you will receive a token in the response that you can use to get the next batch of results.\n\n\nTo check if more results are available, check for the \nnextToken\n key in the response event:\n\n\nlocal\n \ntoken\n\n\n\nlocal\n \nfunction\n \nonListObjects\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n)\n\n  \nelse\n\n\n    \n--check for more results\n\n    \nif\n \nevt\n.\nnextToken\n \nthen\n\n      \n--store the token however you'd like\n\n      \ntoken\n \n=\n \nevt\n.\nnextToken\n\n    \nend\n\n\n    \n--print out the current object list results\n\n    \nfor\n \ni\n=\n1\n,\n \n#\nevt\n.\nobjects\n \ndo\n\n      \nprint\n(\nevt\n.\nobjects\n[\ni\n].\nkey\n)\n\n    \nend\n\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \nmaxKeys\n \n=\n \n20\n\n\n}\n\n\n\ns3\n:\nlistObjects\n(\n\"my-bucket\"\n,\n \nonListObjects\n,\n \nparams\n)\n\n\n\n\n\n\nYou then call the \nlistObjects\n method again, passing the token in the \nparams\n to get the next batch:\n\n\n-- listener function goes here\n\n\n-- ...\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \nmaxKeys\n \n=\n \n20\n,\n\n  \nnextToken\n \n=\n \ntoken\n\n\n}\n\n\n\ns3\n:\nlistObjects\n(\n\"my-bucket\"\n,\n \nonListObjects\n,\n \nparams\n)\n\n\n\n\n\n\nStart-After\n\n\nTo list objects after a specific object key, add the object key to the \nstartAfter\n params key:\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \nstartAfter\n \n=\n \n\"image001.png\"\n\n\n}\n\n\n\n\n\n\n\n\nputObject\n\n\nUpload a file to a bucket owned by the AWS user.\n\n\ns3\n:\nputObject\n(\nbase_dir\n,\n \nfile_path\n,\n \nbucket_name\n,\n \nobject_key\n,\n \nlistener\n[,\n \nparams\n])\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbase_dir\n\n\nThe system base directory.\n\n\nConst\n\n\nY\n\n\n\n\n\n\nfile_path\n\n\nThe source file path with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbucket_name\n\n\nThe name of the destination bucket.\n\n\nString\n\n\nY\n\n\n\n\n\n\nobject_key\n\n\nThe destination object key with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nAn event listener to receive the results.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\nparams\n\n\nOptional parameters for the put operation.\n\n\nTable\n\n\nN\n\n\n\n\n\n\n\n\nUsage\n\n\nlocal\n \nfunction\n \nonPutObject\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n,\n \nevt\n.\nmessage\n,\n \nevt\n.\nstatus\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\nevt\n.\nprogress\n)\n\n    \nelse\n\n      \nprint\n(\n\"object upload complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ns3\n:\nputObject\n(\n\n  \nsystem\n.\nDocumentsDirectory\n,\n\n  \n\"image.png\"\n,\n\n  \n\"my-bucket\"\n,\n\n  \n\"my-image.png\"\n,\n\n  \nonPutObject\n\n\n)\n\n\n\n\n\n\nPut Object Parameters Keys\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nType\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nacl\n\n\nA canned ACL code.\n\n\nConst\n\n\ns3.PRIVATE\n\n\n\n\n\n\nstorage\n\n\nThe storage class for the uploaded file.\n\n\nConst\n\n\ns3.STANDARD\n\n\n\n\n\n\n\n\nUsage\n\n\nlocal\n \nfunction\n \nonPutObject\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n,\n \nevt\n.\nmessage\n,\n \nevt\n.\nstatus\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\nevt\n.\nprogress\n)\n\n    \nelse\n\n      \nprint\n(\n\"object upload complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \nstorage\n \n=\n \ns3\n.\nREDUCED_REDUNDANCY\n\n\n}\n\n\n\ns3\n:\nputObject\n(\n\"my-bucket\"\n,\n \nonPutObject\n,\n \nparams\n)\n\n\n\n\n\n\nUpload Progress\n\n\nBy default the \nputObject\n listener event returns a \nprogress\n key with the current upload progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.\n\n\nIf you don't care about the progress, you can write the listener function like so:\n\n\nlocal\n \nfunction\n \nonPutObject\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n,\n \nevt\n.\nmessage\n,\n \nevt\n.\nstatus\n)\n\n  \nelse\n\n    \nif\n \nnot\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\n\"object upload complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\n\n\ngetObject\n\n\nDownload a file from a bucket owned by the AWS user.\n\n\ns3\n:\ngetObject\n(\nbucket_name\n,\n \nobject_key\n,\n \nbase_dir\n,\n \ndest_path\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbucket_name\n\n\nThe name of the source bucket.\n\n\nString\n\n\nY\n\n\n\n\n\n\nobject_key\n\n\nThe object key with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nbase_dir\n\n\nThe system base directory.\n\n\nConst\n\n\nY\n\n\n\n\n\n\ndest_path\n\n\nThe destination file path with extenstion.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nAn event listener to receive the results.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nUsage\n\n\nlocal\n \nfunction\n \nonGetObject\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n,\n \nevt\n.\nmessage\n,\n \nevt\n.\nstatus\n)\n\n  \nelse\n\n    \nif\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\nevt\n.\nprogress\n)\n\n    \nelse\n\n      \nprint\n(\n\"object download complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\ns3\n:\ngetObject\n(\n\n  \n\"my-bucket\"\n,\n \n  \n\"image.png\"\n,\n \n  \nsystem\n.\nDocumentsDirectory\n,\n\n  \n\"my-image.png\"\n,\n\n  \nonGetObject\n\n\n)\n\n\n\n\n\n\nDownload Progress\n\n\nBy default the \ngetObject\n listener event returns a \nprogress\n key with the current download progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.\n\n\nIf you don't care about the progress, you can write the listener function like so:\n\n\nlocal\n \nfunction\n \nonGetObject\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n,\n \nevt\n.\nmessage\n,\n \nevt\n.\nstatus\n)\n\n  \nelse\n\n    \nif\n \nnot\n \nevt\n.\nprogress\n \nthen\n\n      \nprint\n(\n\"object download complete\"\n)\n\n    \nend\n\n  \nend\n\n\nend\n\n\n\n\n\n\n\n\ndeleteObject\n\n\nDelete a file from a bucket owned by the AWS user.\n\n\ns3\n:\ndeleteObject\n(\nbucket_name\n,\n \nobject_key\n,\n \nlistener\n)\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbucket_name\n\n\nThe name of the source bucket.\n\n\nString\n\n\nY\n\n\n\n\n\n\nobject_key\n\n\nThe object file key with extension.\n\n\nString\n\n\nY\n\n\n\n\n\n\nlistener\n\n\nAn event listener to receive the results.\n\n\nFunction\n\n\nY\n\n\n\n\n\n\n\n\nUsage\n\n\nlocal\n \nfunction\n \nonDeleteObject\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n,\n \nevt\n.\nmessage\n,\n \nevt\n.\nstatus\n)\n\n  \nelse\n\n    \nprint\n(\n\"object deleted\"\n)\n\n  \nend\n\n\nend\n\n\n\ns3\n:\ndeleteObject\n(\n\"my-bucket\"\n,\n \n\"image.png\"\n,\n \nonDeleteObject\n)\n\n\n\n\n\n\n\n\nNote\n\n\nIf the bucket object does not exist, this method will fail silently without an error.",
            "title": "S3 Lite API"
        },
        {
            "location": "/api/#setup",
            "text": "To use the S3 Lite plugin, you will need to  require  it:  local   s3   =   require ( \"plugin.s3-lite\" )",
            "title": "Setup"
        },
        {
            "location": "/api/#new",
            "text": "Create and initialize a new S3 Lite instance.  s3 : new ( config_tbl )   Config Table Keys     Name  Description  Type  Default  Required      key  The AWS key for the account.  String  nil  Y    secret  The AWS secret key for the account.  String  nil  Y    region  The region where the S3 bucket resides.  Const  s3.US_EAST_1  N     Usage  s3 : new ({ \n   key   =   \"aws-key-1234\" , \n   secret   =   \"aws-secret-abcd\" , \n   region   =   s3 . EU_WEST_1  })    Note  The AWS user must have the proper S3  permissions  set up through the AWS IAM console.",
            "title": "new"
        },
        {
            "location": "/api/#listbuckets",
            "text": "List S3 buckets that are owned by the AWS user. Returns a table array with bucket names. If no buckets exist, the array will be empty.  s3 : listBuckets ( listener )   Parameters     Name  Description  Type  Required      listener  An event listener to receive the results.  Function  Y     Usage  local   function   onListBuckets (   evt   ) \n   if   evt . error   then \n     print ( evt . error ,   evt . message ,   evt . status ) \n   else \n     local   buckets   =   evt . buckets \n     for   i = 1 ,   # buckets   do \n       print ( buckets [ i ]) \n     end \n   end  end  s3 : listBuckets ( onListBuckets )    Note  Bucket creation and deletion must be managed through the AWS S3 web console.",
            "title": "listBuckets"
        },
        {
            "location": "/api/#listobjects",
            "text": "List objects contained in a bucket owned by the AWS user.  s3 : listObjects ( bucket_name ,   listener [,   params ])   Parameters     Name  Description  Type  Required      bucket_name  The name of the bucket to list.  String  Y    listener  An event listener to receive the results.  Function  Y     Usage  local   function   onListObjects (   evt   ) \n   if   evt . error   then \n     print ( evt . error ,   evt . message ,   evt . status ) \n   else \n     local   objects   =   evt . objects \n\n     for   i = 1 ,   # objects   do \n       print ( objects [ i ]. key ,   objects [ i ]. size ) \n     end \n   end  end  s3 : listObjects ( \"my-bucket\" ,   onListObjects )   List Objects Parameters Keys     Key  Description  Type  Default      maxKeys  Sets the maximum number of keys returned.  Number  1000    prefix  Return keys that begin with the specified prefix. See  Prefixes .  String  nil    startAfter  Return key names after a specific object key. See  Start-After  below.  String  nil    nextToken  Token to get the next set of results, if any. See  Paging  below.  String  nil     Usage  local   function   onListObjects (   evt   ) \n   if   evt . error   then \n     print ( evt . error ,   evt . message ,   evt . status ) \n   else \n     local   objects   =   evt . objects \n\n     for   i = 1 ,   # objects   do \n       print ( objects [ i ]. key ,   objects [ i ]. size ) \n     end \n   end  end  local   params   =   { \n   maxKeys   =   20  }  s3 : listObjects ( \"my-bucket\" ,   onListObjects ,   params )   Paging  If the bucket contains more than 1000 objects, or you have set the  maxKeys  to a number less than the total amount of objects in the bucket, you will receive a token in the response that you can use to get the next batch of results.  To check if more results are available, check for the  nextToken  key in the response event:  local   token  local   function   onListObjects (   evt   ) \n   if   evt . error   then \n     print ( evt . error ) \n   else \n\n     --check for more results \n     if   evt . nextToken   then \n       --store the token however you'd like \n       token   =   evt . nextToken \n     end \n\n     --print out the current object list results \n     for   i = 1 ,   # evt . objects   do \n       print ( evt . objects [ i ]. key ) \n     end \n\n   end  end  local   params   =   { \n   maxKeys   =   20  }  s3 : listObjects ( \"my-bucket\" ,   onListObjects ,   params )   You then call the  listObjects  method again, passing the token in the  params  to get the next batch:  -- listener function goes here  -- ...  local   params   =   { \n   maxKeys   =   20 , \n   nextToken   =   token  }  s3 : listObjects ( \"my-bucket\" ,   onListObjects ,   params )   Start-After  To list objects after a specific object key, add the object key to the  startAfter  params key:  local   params   =   { \n   startAfter   =   \"image001.png\"  }",
            "title": "listObjects"
        },
        {
            "location": "/api/#putobject",
            "text": "Upload a file to a bucket owned by the AWS user.  s3 : putObject ( base_dir ,   file_path ,   bucket_name ,   object_key ,   listener [,   params ])   Parameters     Name  Description  Type  Required      base_dir  The system base directory.  Const  Y    file_path  The source file path with extension.  String  Y    bucket_name  The name of the destination bucket.  String  Y    object_key  The destination object key with extension.  String  Y    listener  An event listener to receive the results.  Function  Y    params  Optional parameters for the put operation.  Table  N     Usage  local   function   onPutObject (   evt   ) \n   if   evt . error   then \n     print ( evt . error ,   evt . message ,   evt . status ) \n   else \n     if   evt . progress   then \n       print ( evt . progress ) \n     else \n       print ( \"object upload complete\" ) \n     end \n   end  end  s3 : putObject ( \n   system . DocumentsDirectory , \n   \"image.png\" , \n   \"my-bucket\" , \n   \"my-image.png\" , \n   onPutObject  )   Put Object Parameters Keys     Key  Description  Type  Default      acl  A canned ACL code.  Const  s3.PRIVATE    storage  The storage class for the uploaded file.  Const  s3.STANDARD     Usage  local   function   onPutObject (   evt   ) \n   if   evt . error   then \n     print ( evt . error ,   evt . message ,   evt . status ) \n   else \n     if   evt . progress   then \n       print ( evt . progress ) \n     else \n       print ( \"object upload complete\" ) \n     end \n   end  end  local   params   =   { \n   storage   =   s3 . REDUCED_REDUNDANCY  }  s3 : putObject ( \"my-bucket\" ,   onPutObject ,   params )   Upload Progress  By default the  putObject  listener event returns a  progress  key with the current upload progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.  If you don't care about the progress, you can write the listener function like so:  local   function   onPutObject (   evt   ) \n   if   evt . error   then \n     print ( evt . error ,   evt . message ,   evt . status ) \n   else \n     if   not   evt . progress   then \n       print ( \"object upload complete\" ) \n     end \n   end  end",
            "title": "putObject"
        },
        {
            "location": "/api/#getobject",
            "text": "Download a file from a bucket owned by the AWS user.  s3 : getObject ( bucket_name ,   object_key ,   base_dir ,   dest_path ,   listener )   Parameters     Name  Description  Type  Required      bucket_name  The name of the source bucket.  String  Y    object_key  The object key with extension.  String  Y    base_dir  The system base directory.  Const  Y    dest_path  The destination file path with extenstion.  String  Y    listener  An event listener to receive the results.  Function  Y     Usage  local   function   onGetObject (   evt   ) \n   if   evt . error   then \n     print ( evt . error ,   evt . message ,   evt . status ) \n   else \n     if   evt . progress   then \n       print ( evt . progress ) \n     else \n       print ( \"object download complete\" ) \n     end \n   end  end  s3 : getObject ( \n   \"my-bucket\" ,  \n   \"image.png\" ,  \n   system . DocumentsDirectory , \n   \"my-image.png\" , \n   onGetObject  )   Download Progress  By default the  getObject  listener event returns a  progress  key with the current download progress as a decimal value between 0 and 1 that you can use to create progress bars, etc.  If you don't care about the progress, you can write the listener function like so:  local   function   onGetObject (   evt   ) \n   if   evt . error   then \n     print ( evt . error ,   evt . message ,   evt . status ) \n   else \n     if   not   evt . progress   then \n       print ( \"object download complete\" ) \n     end \n   end  end",
            "title": "getObject"
        },
        {
            "location": "/api/#deleteobject",
            "text": "Delete a file from a bucket owned by the AWS user.  s3 : deleteObject ( bucket_name ,   object_key ,   listener )   Parameters     Name  Description  Type  Required      bucket_name  The name of the source bucket.  String  Y    object_key  The object file key with extension.  String  Y    listener  An event listener to receive the results.  Function  Y     Usage  local   function   onDeleteObject (   evt   ) \n   if   evt . error   then \n     print ( evt . error ,   evt . message ,   evt . status ) \n   else \n     print ( \"object deleted\" ) \n   end  end  s3 : deleteObject ( \"my-bucket\" ,   \"image.png\" ,   onDeleteObject )    Note  If the bucket object does not exist, this method will fail silently without an error.",
            "title": "deleteObject"
        },
        {
            "location": "/errors/",
            "text": "If an error occurs, all listener events contain up to three keys with the error information.\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nAn string based error code.\n\n\n\n\n\n\nmessage\n\n\nA human readable error message.\n\n\n\n\n\n\nstatus\n\n\nThe numerical status code returned from the network request.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe \nmessage\n and \nstatus\n keys can possibly be \nnil\n.\n\n\n\n\nExample Listener\n\n\nlocal\n \nfunction\n \nonResponse\n(\n \nevt\n \n)\n\n  \nif\n \nevt\n.\nerror\n \nthen\n\n    \nprint\n(\nevt\n.\nerror\n,\n \nevt\n.\nmessage\n,\n \nevt\n.\nstatus\n)\n\n  \nelse\n\n    \n--no errors\n\n  \nend\n\n\nend",
            "title": "Errors"
        },
        {
            "location": "/constants/",
            "text": "Storage Class\n\n\n\n\ns3.STANDARD\n\n\ns3.REDUCED_REDUNDANCY\n\n\n\n\n\n\nCanned ACL\n\n\n\n\ns3.PRIVATE\n\n\ns3.PUBLIC_READ\n\n\ns3.PUBLIC_READ_WRITE\n\n\ns3.AWS_EXEC_READ\n\n\ns3.AUTHENTICATED_READ\n\n\ns3.BUCKET_OWNER_READ\n\n\ns3.BUCKET_OWNER_FULL_CONTROL\n\n\n\n\nSee \nCanned ACL\n in the AWS documentation for more information.\n\n\n\n\nBase Directories\n\n\n\n\nsystem.ApplicationSupportDirectory\n\n\nsystem.CachesDirectory\n\n\nsystem.DocumentsDirectory\n\n\nsystem.ResourceDirectory\n\n\nsystem.TemporaryDirectory\n\n\n\n\nSee \nCorona system directory constants\n for more information.\n\n\n\n\nRegions\n\n\n\n\n\n\n\n\nEnum\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\ns3.US_EAST_1\n\n\nN. Virginia\n\n\n\n\n\n\ns3.US_EAST_2\n\n\nOhio\n\n\n\n\n\n\ns3.US_WEST_1\n\n\nN. California\n\n\n\n\n\n\ns3.US_WEST_2\n\n\nOregon\n\n\n\n\n\n\ns3.CA_CENTRAL_1\n\n\nCanada\n\n\n\n\n\n\ns3.EU_WEST_1\n\n\nIreland\n\n\n\n\n\n\ns3.EU_WEST_2\n\n\nLondon\n\n\n\n\n\n\ns3.EU_CENTRAL_1\n\n\nFrankfurt\n\n\n\n\n\n\ns3.AP_SOUTH_1\n\n\nMumbai\n\n\n\n\n\n\ns3.AP_SOUTHEAST_1\n\n\nSingapore\n\n\n\n\n\n\ns3.AP_SOUTHEAST_2\n\n\nSydney\n\n\n\n\n\n\ns3.AP_NORTHEAST_1\n\n\nTokyo\n\n\n\n\n\n\ns3.AP_NORTHEAST_2\n\n\nSeoul\n\n\n\n\n\n\ns3.SA_EAST_1\n\n\nS\u00e3o Paulo",
            "title": "Constants"
        },
        {
            "location": "/constants/#storage-class",
            "text": "s3.STANDARD  s3.REDUCED_REDUNDANCY",
            "title": "Storage Class"
        },
        {
            "location": "/constants/#canned-acl",
            "text": "s3.PRIVATE  s3.PUBLIC_READ  s3.PUBLIC_READ_WRITE  s3.AWS_EXEC_READ  s3.AUTHENTICATED_READ  s3.BUCKET_OWNER_READ  s3.BUCKET_OWNER_FULL_CONTROL   See  Canned ACL  in the AWS documentation for more information.",
            "title": "Canned ACL"
        },
        {
            "location": "/constants/#base-directories",
            "text": "system.ApplicationSupportDirectory  system.CachesDirectory  system.DocumentsDirectory  system.ResourceDirectory  system.TemporaryDirectory   See  Corona system directory constants  for more information.",
            "title": "Base Directories"
        },
        {
            "location": "/constants/#regions",
            "text": "Enum  Location      s3.US_EAST_1  N. Virginia    s3.US_EAST_2  Ohio    s3.US_WEST_1  N. California    s3.US_WEST_2  Oregon    s3.CA_CENTRAL_1  Canada    s3.EU_WEST_1  Ireland    s3.EU_WEST_2  London    s3.EU_CENTRAL_1  Frankfurt    s3.AP_SOUTH_1  Mumbai    s3.AP_SOUTHEAST_1  Singapore    s3.AP_SOUTHEAST_2  Sydney    s3.AP_NORTHEAST_1  Tokyo    s3.AP_NORTHEAST_2  Seoul    s3.SA_EAST_1  S\u00e3o Paulo",
            "title": "Regions"
        },
        {
            "location": "/prefixes/",
            "text": "Virtual File System\n\n\nWhile you can create a \"folder\" in the AWS S3 console, these are actually just a visual representation of a virtual file system.\n\n\nYou can create these directory hierarchies by prefixing the object key when using the \nputObject\n API method:\n\n\ns3\n:\nputObject\n(\n\n  \nsystem\n.\nDocumentsDirectory\n,\n\n  \n\"image.jpg\"\n,\n\n  \n\"my-bucket\"\n,\n\n  \n\"images/image.jpg\"\n,\n \n-- virtual directory is 'images'\n\n  \nlistener\n\n\n)\n\n\n\n\n\n\nYou can also create deeper structures:\n\n\ns3\n:\nputObject\n(\n\n  \nsystem\n.\nDocumentsDirectory\n,\n\n  \n\"image.jpg\"\n,\n\n  \n\"my-bucket\"\n,\n\n  \n\"images/indoors/002/image.jpg\"\n,\n \n-- nested directory structure\n\n  \nlistener\n\n\n)\n\n\n\n\n\n\nListing Virtual Directories\n\n\nYou can specifically list objects in these structures when using the \nlistObjects\n API method, by passing a \nprefix\n key to the params table:\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \nprefix\n \n=\n \n\"images\"\n \n-- list objects in the images 'directory'\n\n\n}\n\n\n\ns3\n:\nlistObjects\n(\n\n  \n\"my-bucket\"\n,\n\n  \nlistener\n,\n\n  \nparams\n\n\n)\n\n\n\n\n\n\nFor the deeper structure:\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \nprefix\n \n=\n \n\"images/indoors/002\"\n\n\n}\n\n\n\ns3\n:\nlistObjects\n(\n\n  \n\"my-bucket\"\n,\n\n  \nlistener\n,\n\n  \nparams\n\n\n)\n\n\n\n\n\n\nFiltering by Prefix\n\n\nYou can use the \nprefix\n key to filter the objects in a directory, for example to return all object that start with a capital 'E':\n\n\nlocal\n \nparams\n \n=\n \n{\n\n  \nprefix\n \n=\n \n\"E\"\n\n\n}\n\n\n\ns3\n:\nlistObjects\n(\n\n  \n\"my-bucket\"\n,\n\n  \nlistener\n,\n\n  \nparams\n\n\n)",
            "title": "Using Prefixes"
        },
        {
            "location": "/prefixes/#virtual-file-system",
            "text": "While you can create a \"folder\" in the AWS S3 console, these are actually just a visual representation of a virtual file system.  You can create these directory hierarchies by prefixing the object key when using the  putObject  API method:  s3 : putObject ( \n   system . DocumentsDirectory , \n   \"image.jpg\" , \n   \"my-bucket\" , \n   \"images/image.jpg\" ,   -- virtual directory is 'images' \n   listener  )   You can also create deeper structures:  s3 : putObject ( \n   system . DocumentsDirectory , \n   \"image.jpg\" , \n   \"my-bucket\" , \n   \"images/indoors/002/image.jpg\" ,   -- nested directory structure \n   listener  )",
            "title": "Virtual File System"
        },
        {
            "location": "/prefixes/#listing-virtual-directories",
            "text": "You can specifically list objects in these structures when using the  listObjects  API method, by passing a  prefix  key to the params table:  local   params   =   { \n   prefix   =   \"images\"   -- list objects in the images 'directory'  }  s3 : listObjects ( \n   \"my-bucket\" , \n   listener , \n   params  )   For the deeper structure:  local   params   =   { \n   prefix   =   \"images/indoors/002\"  }  s3 : listObjects ( \n   \"my-bucket\" , \n   listener , \n   params  )",
            "title": "Listing Virtual Directories"
        },
        {
            "location": "/prefixes/#filtering-by-prefix",
            "text": "You can use the  prefix  key to filter the objects in a directory, for example to return all object that start with a capital 'E':  local   params   =   { \n   prefix   =   \"E\"  }  s3 : listObjects ( \n   \"my-bucket\" , \n   listener , \n   params  )",
            "title": "Filtering by Prefix"
        },
        {
            "location": "/notes/",
            "text": "User permissions\n\n\nThe AWS user must have the proper S3 permissons. In particular the following permissions are required for the S3 Lite plugin:\n\n\n\n\nDeleteObject\n\n\nGetObject\n\n\nListAllMyBuckets\n\n\nListBucket\n\n\nPutObject\n\n\nPutObjectAcl\n\n\n\n\nYou can add these when creating a IAM user, or as an S3 policy file.\n\n\n\n\nTip\n\n\nFor testing, when creating a IAM user, you can use the canned policy \nAmazonS3FullAccess\n. \n\n\n\n\n\n\nAndroid file restrictions\n\n\nWhen working with Android, make sure you understand the file restrictions. You can find more information in the Corona documentation by \nclicking here\n.\n\n\nIn the documentaion, there is a reference to a \ncopyFile\n method. As a convenience, this method is available in the S3 Lite plugin and can be accessed like so:\n\n\ns3\n.\nutils\n.\ncopyFile\n(\nsrcName\n,\n \nsrcPath\n,\n \ndstName\n,\n \ndstPath\n,\n \noverwrite\n)\n\n\n\n\n\n\n\n\nSlow responses\n\n\nDepending on network conditions, device, and file size there can be a number of seconds delay between issuing a command to S3, and the actual response.",
            "title": "Troubleshooting"
        },
        {
            "location": "/notes/#user-permissions",
            "text": "The AWS user must have the proper S3 permissons. In particular the following permissions are required for the S3 Lite plugin:   DeleteObject  GetObject  ListAllMyBuckets  ListBucket  PutObject  PutObjectAcl   You can add these when creating a IAM user, or as an S3 policy file.   Tip  For testing, when creating a IAM user, you can use the canned policy  AmazonS3FullAccess .",
            "title": "User permissions"
        },
        {
            "location": "/notes/#android-file-restrictions",
            "text": "When working with Android, make sure you understand the file restrictions. You can find more information in the Corona documentation by  clicking here .  In the documentaion, there is a reference to a  copyFile  method. As a convenience, this method is available in the S3 Lite plugin and can be accessed like so:  s3 . utils . copyFile ( srcName ,   srcPath ,   dstName ,   dstPath ,   overwrite )",
            "title": "Android file restrictions"
        },
        {
            "location": "/notes/#slow-responses",
            "text": "Depending on network conditions, device, and file size there can be a number of seconds delay between issuing a command to S3, and the actual response.",
            "title": "Slow responses"
        },
        {
            "location": "/demo/",
            "text": "Click \nhere\n to download a Corona demo project.",
            "title": "Demo Project"
        },
        {
            "location": "/about/",
            "text": "Code and documentation \u00a92017 C. Byerley (\ndevelephant\n).",
            "title": "About"
        }
    ]
}